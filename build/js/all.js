function distanceBetweenPoint(n,t){return Math.sqrt((t.x-n.x)*(t.x-n.x)+(t.y-n.y)*(t.y-n.y))}function distanceBetweenPointFor3D(n,t){return Math.sqrt((t.x-n.x)*(t.x-n.x)+(t.y-n.y)*(t.y-n.y)+(t.z-n.z)*(t.z-n.z))}function find2DMidPoint(n,t){var i={};return i.x=(n.x+t.x)/2,i.y=(n.y+t.y)/2,i}function find3DMidPoint(n,t){var i={};return i.x=(n.x+t.x)/2,i.y=(n.y+t.y)/2,i.z=(n.z+t.z)/2,i}
function slopeBetweenPoints(e,n){var t=(n.y-e.y)/(n.x-e.x);return t==1/0?0:t}function perpSlop(e){return-1/e}function arePerp(e,n){return e*n==-1}function interceptBetweenPoints(e,n){return n.y-e*n.x}function getRoot(e,n,t,o){var r,i,u=slopeBetweenPoints(e,n),s=slopeBetweenPoints(t,o);return u!==s?"one root":(r=interceptBetweenPoints(u,e),i=interceptBetweenPoints(s,t),r===i?"much root":"no root")}function lineIntersect(e,n,t,o){var r={},i=slopeBetweenPoints(e,n),u=slopeBetweenPoints(t,o);return i!==u&&(r.x=Math.round((i*e.x-u*t.x+t.y-e.y)/(i-u)),r.y=Math.round(i*(r.x-e.x)+e.y)),r}
function radianToDegree(n){return 180*n/Math.PI}function degreeToRadian(n){return n*Math.PI/180}function calcAngle2D(n,a){var e=Math.atan2(a.y-n.y,a.x-n.x);return radianToDegree(e)}
function polarToCompConversion2D(r){var n={};return n.x=r.mag*Math.cos(degreeToRadian(r.dir)),n.y=r.mag*Math.sin(degreeToRadian(r.dir)),n}function compToPolarConversion2D(r){var n={};return n.mag=Math.sqrt(r.x*r.x+r.y*r.y),n.dir=Math.round(radianToDegree(Math.atan2(r.y,r.x))),n}function normalization(r){var n={},t=Math.sqrt(r.x*r.x+r.y*r.y+r.z*r.z);return n.x=r.x/t,n.y=r.y/t,n.z=r.z/t,n}function innerProduct(r,n){var t;return t=r.x*n.x+r.y*n.y+r.z*n.z}function isOrthogonal(r,n){var t=innerProduct(r,n);return 0==t}function angleBetweenVector(r,n){var t=innerProduct(r,n),a=Math.sqrt(r.x*r.x+r.y*r.y+r.z*r.z),o=Math.sqrt(n.x*n.x+n.y*n.y+n.z*n.z),e=Math.acos(t/(a*o));return radianToDegree(e)}function outerProduct(r,n){var t={};return t.x=r.y*n.z-r.z*n.y,t.y=r.z*n.x-r.x*n.z,t.z=r.x*n.y-r.y*n.x,t}